{"version":3,"sources":["page/austin.jfif","page/banner.jpg","page/home.jsx","lib/api-fetch.js","page/about.jsx","page/cities.jsx","page/city.jsx","page/artists.jsx","page/attractions.jsx","components/navigation.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","props","className","src","Banner","alt","Container","Row","Col","sm","id","Austin","apiFetch","url","method","fetch","mode","cache","headers","redirect","referrerPolicy","People","useState","people","setPeople","useEffect","then","resp","json","data","about","console","log","length","map","name","photo","stats","commits","issues","description","Card","key","CardTitle","CardBody","CardText","Cities","cities","setCities","state","population_size","imageUrl","Table","dark","scope","href","City","useParams","city","setCity","Artists","artists","setArtists","numEvents","nextEventLoc","fbUrl","Attractions","Navigation","to","path","children","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.adad3596.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/austin.e59a49ac.jfif\";","module.exports = __webpack_public_path__ + \"static/media/banner.d627c9a1.jpg\";","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './home.css'\nimport { Row, Col, Container } from 'react-bootstrap'\nimport Austin from \"./austin.jfif\"\nimport Banner from \"./banner.jpg\"\n\n\nconst Home = props => {\n\treturn (\n\t\t<div className=\"body\">\n\t\t\t<h1>Home</h1>\n\t\t\t<img className=\"banner\" src={Banner} alt=\"Picture of City\" />\n\t\t\t<p className=\"descr\"> The following are randomized cities and their main attractions. </p>\n\t\t\t<Container className=\"Container\">\n\t\t\t\t<Row className=\"Row\">\n\t\t\t\t\t<Col sm>\n\t\t\t\t\t\t<div className=\"randCity1\">\n\t\t\t\t\t\t\t<h3> Austin, TX </h3>\n\t\t\t\t\t\t\t<img id=\"randCity1\" src={Austin} alt=\"pic of city\" />\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p> Average Airbnb Price: </p>\n\t\t\t\t\t\t\t\t<p> Main Attractions: </p>\n\t\t\t\t\t\t\t\t<p> #BBQ, #Music, #Nightlife </p>\n\t\t\t\t\t\t\t\t<p> Similar Cities </p>\n\t\t\t\t\t\t\t\t<p> City A, City B City C </p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t</div>\n\t)\n}\n\nHome.propTypes = {\n\n}\n\nexport default Home\n","const base = \"http://127.0.0.1:5000/api\"\n\n\nconst apiFetch = (url, {method = \"GET\"}) => fetch(`${base}${url}`, {\n  method,\n  mode: 'cors',\n  cache: 'no-cache',\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  },\n  redirect: 'follow', // manual, *follow, error\n  referrerPolicy: 'no-referrer' // no-referrer, *client\n})\n\nexport default apiFetch;","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Card, CardBody, CardTitle, CardText } from 'reactstrap'\nimport apiFetch from '../lib/api-fetch'\n\nconst People = props => {\n  const [people, setPeople] = useState([])\n  useEffect(() => {\n    apiFetch('/about', {})\n      .then(resp => resp.json())\n      .then(data => {\n        setPeople(data.about)\n        console.log(data)\n      })\n  }, [])\n\n  return (\n    <div>\n      {people.length ? people.map(\n        ({ name, photo, stats: { commits, issues }, description }) =>\n          <Card key={name}>\n            <CardTitle>{name}</CardTitle>\n            <CardBody>\n              <CardText>{description}</CardText>\n              <br />\n              <CardText> Commits: {commits} </CardText>\n              <CardText> Issues: {issues} </CardText>\n            </CardBody>\n          </Card>\n      ) : <p>Fetching data...</p>}\n    </div>\n\n  )\n\n}\nPeople.propTypes = {\n\n}\n\nexport default People","import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Table } from \"reactstrap\";\nimport \"./cities.css\";\n\nimport apiFetch from \"../lib/api-fetch\";\nconst Cities = props => {\n  const [cities, setCities] = useState([]);\n  useEffect(() => {\n    apiFetch(\"/cities\", {})\n      .then(resp => resp.json())\n      .then(data => {\n        setCities(data.cities);\n        console.log(data);\n      });\n  }, []);\n\n  return (\n    <div className=\"cities-list\">\n      {cities.length &&\n        cities.map(({ name, state, description, id, imageUrl, population_size }) => (\n          <Table dark>\n          <thead>\n            <tr>\n              <th></th>\n              <th>City</th>\n              <th>State</th>\n              <th>Description</th>\n              <th>Population</th>\n              <th>Venues</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <th scope=\"row\">IMAGEURL</th>\n              <td><a href={`/city/${id}`}>{name}</a></td>\n              <td>{state}</td>\n              <td>{description}</td>\n              <td>{population_size}</td>\n              <td>list some music venues</td>\n            </tr>\n          </tbody>\n        </Table>\n        ))}\n    </div>\n  );\n};\n\nCities.propTypes = {};\n\nexport default Cities;\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { useParams } from \"react-router-dom\";\nimport apiFetch from '../lib/api-fetch'\nimport './city.css'\n\nconst City = () => {\n  const { id } = useParams();\n\n  const [city, setCity] = useState(null)\n  useEffect(() => {\n    apiFetch(`/city/${id}`, {})\n      .then(resp => resp.json())\n      .then(data => {\n        setCity(data.city)\n      })\n  }, [])\n\n  if (city) {\n    const { name, description } = city\n    return (\n      <div className=\"city1\">\n        <h1> {name} </h1>\n        <p> {description} </p>\n        <img id=\"randCity1\" src=\"\" alt=\"pic of city\" />\n        <div>\n          <p> Average Airbnb Price: </p>\n          <p> Main Attractions: </p>\n          <p> #BBQ, #Music, #Nightlife </p>\n          <p> Similar Cities </p>\n          <p> City A, City B City C </p>\n        </div>\n\n      </div>\n    )\n  }\n\n  return <> </>\n}\n\nCity.propTypes = {\n\n}\n\nexport default City\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport apiFetch from '../lib/api-fetch'\nimport './artists.css'\n\nconst Artists = props => {\n  const [artists, setArtists] = useState([])\n  useEffect(() => {\n    apiFetch('/artists', {})\n      .then(resp => resp.json())\n      .then(data => {\n        setArtists(data.artists)\n        console.log(data)\n      })\n  }, [])\n\n  return (\n    <>\n    <h1> Artists </h1>\n\n    <table>\n      <tr>\n        <td> Name </td> <td > Description </td> <td> Number of Upcoming Events </td>\n        <td> Upcoming Event Location</td> <td> Facecbook PAge Link </td>\n        \n      </tr>\n\n    {artists.length && artists.map(\n      ({ name, description, numEvents, nextEventLoc, fbUrl, id }) =>\n        <tr>\n           <td> <a href={`/artist/${id}`}> {name}</a> </td> <td className=\"artistDescr\">{description} </td> \n           <td> {numEvents} </td> <td> {nextEventLoc} </td>\n           <td> <a href='{fbUrl}'> Facebook Page </a> </td>\n          \n        </tr>\n    )}   \n      \n    </table>\n    </>\n  )\n}\n\nArtists.propTypes = {\n\n}\n\nexport default Artists\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Attractions = props => {\n  return (\n    <>\n      <h1>Attractions</h1>\n    </>\n  )\n}\n\nAttractions.propTypes = {\n\n}\n\nexport default Attractions\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { Button, Navbar, Nav } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\n\nimport Home from \"../page/home\";\nimport About from \"../page/about\";\nimport Cities from \"../page/cities\";\nimport City from \"../page/city\";\nimport Artists from \"../page/artists\";\nimport Attractions from \"../page/attractions\";\nimport Business from \"../page/business\";\nimport Music from \"../page/music\";\nimport Venue from \"../page/venue\";\nimport Event from \"../page/event\";\n\n\n\nconst Navigation = props => (\n  <Router>\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <Link to=\"/\" className=\"nav-link\">Home</Link>\n            </li>\n            <li className=\"nav-item active\">\n              <Link to=\"/about\" className=\"nav-link\">About</Link>\n            </li>\n            <li className=\"nav-item active\">\n              <Link to=\"/cities\" className=\"nav-link\">Cities</Link>\n            </li>\n            <li className=\"nav-item active\">\n              <Link to=\"/attractions\" className=\"nav-link\">Attractions</Link>\n            </li>\n            <li className=\"nav-item active\">\n              <Link to=\"/artists\" className=\"nav-link\">Artists</Link>\n            </li>\n          </ul>\n      </nav>\n\n      <Switch>\n        <Route path=\"/about\">\n          <About />\n        </Route>\n        <Route path=\"/cities\">\n          <Cities />\n        </Route>\n        <Route path=\"/city/:id\" children={<City/>} />\n        <Route path=\"/attractions\">\n          <Attractions />\n        </Route>\n        <Route path=\"/artists\">\n          <Artists />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n  </Router>\n)\n\n\n\nNavigation.propTypes = {};\n\nexport default Navigation;\n","import React from 'react';\nimport './App.css';\nimport Navigation from './components/navigation'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}